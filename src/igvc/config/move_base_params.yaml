shutdown_costmaps: true

controller_frequency: 5.0
controller_patience: 3.0


planner_frequency: 1.0
planner_patience: 5.0

oscillation_timeout: 10.0
oscillation_distance: 0.2

# local planner - default is trajectory rollout
base_local_planner: "dwa_local_planner/DWAPlannerROS"

base_global_planner: "navfn/NavfnROS" #alternatives: global_planner/GlobalPlanner, carrot_planner/CarrotPlanner

NavfnROS:
  visualize_potential: false    #Publish potential for rviz as pointcloud2, not really helpful, default false
  allow_unknown: false          #Specifies whether or not to allow navfn to create plans that traverse unknown space, default true
                                #Needs to have track_unknown_space: true in the obstacle / voxel layer (in costmap_commons_param) to work
  planner_window_x: 0.0         #Specifies the x size of an optional window to restrict the planner to, default 0.0
  planner_window_y: 0.0         #Specifies the y size of an optional window to restrict the planner to, default 0.0
  
  default_tolerance: 0.0        #If the goal is in an obstacle, the planer will plan to the nearest point in the radius of default_tolerance, default 0.0
                                #The area is always searched, so could be slow for big values

DWAPlannerROS:

# Robot Configuration Parameters - Kobuki
  max_vel_x: 2 # 0.55
  min_vel_x: 0.1

  max_vel_y: 0.0  # diff drive robot
  min_vel_y: 0.0  # diff drive robot

  max_vel_trans: 2 # choose slightly less than the base's capability
  min_vel_trans: 0.1  # this is the min trans velocity when there is negligible rotational velocity
 # trans_stopped_vel: 0.1

  # Warning!
  #   do not set min_trans_vel to 0.0 otherwise dwa will always think translational velocities
  #   are non-negligible and small in place rotational velocities will be created.

  max_vel_rot: 1  # choose slightly less than the base's capability
  min_vel_rot: 0    # this is the min angular velocity when there is negligible translational velocity
  #rot_stopped_vel: 0.4
  
  acc_lim_x: 10 # maximum is theoretically 2.0, but we 
  acc_lim_theta: 4
  acc_lim_y: 0.0      # diff drive robot

# Goal Tolerance Parameters
  yaw_goal_tolerance: .5  # 0.05
  xy_goal_tolerance: 0.15  # 0.10
  # latch_xy_goal_tolerance: false

# Forward Simulation Parameters
  # sim_time: 1.0       # 1.7
  # vx_samples: 6       # 3
  vy_samples: 1       # diff drive robot, there is only one sample
  # vtheta_samples: 20  # 20

# Trajectory Scoring Parameters
  path_distance_bias: 32.0      # 32.0   - weighting for how much it should stick to the global path plan
  goal_distance_bias: 24.0      # 24.0   - wighting for how much it should attempt to reach its goal
  occdist_scale: 0.1       # 0.01   - weighting for how much the controller should avoid obstacles
  # forward_point_distance: 0.325 # 0.325  - how far along to place an additional scoring point
  # stop_time_buffer: 0.2         # 0.2    - amount of time a robot must stop in before colliding for a valid traj.
  # scaling_speed: 0.25           # 0.25   - absolute velocity at which to start scaling the robot's footprint
  # max_scaling_factor: 0.2       # 0.2    - how much to scale the robot's footprint when at speed.

# Oscillation Prevention Parameters
  oscillation_reset_dist: 1  # 0.05   - how far to travel before resetting oscillation flags

# Debugging
  # publish_traj_pc : true
  # publish_cost_grid_pc: true
  global_frame_id: odom


# Differential-drive robot configuration - necessary?
#  holonomic_robot: false


#Used for Rotate Recovery Behavior
TrajectoryPlannerROS:
  max_vel_theta: 1
  min_in_place_vel_theta: 0.1
  acc_lim_theta: 4