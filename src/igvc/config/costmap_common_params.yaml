# Maximum range sensor reading in meters that results in an obstacle being placed in the costmap
obstacle_range: 10.0

# Outside of this range is considered free space
raytrace_range: 15.0

# Footprint of the robot with (0,0) being the center (in meters)
footprint: [[-1.25, -0.66], [-1.25, 0.66], [1.25, 0.66], [1.25, -0.66]]

# The static map created using SLAM is being published to this topic
map_topic: /map

# Global reference frame for the costmaps
global_frame: map

# Base frame of the robot
robot_base_frame: base_link

# Frequency in Hz for the costmap to be updated
update_frequency: 5.0

# Frequency in Hz for the costmap to publish display information
publish_frequency: 5.0

# Delay in transform tf data that is tolerable in seconds
transform_tolerance: 0.2

# Width of the map in meters
width: 75

# Height of the map in meters
height: 75

rolling_window: true

subscribe_to_updates: true

# Each costmap is layered
plugins:
  - {name: static_layer, type: "costmap_2d::StaticLayer"}
  - {name: obstacle_layer, type: "costmap_2d::ObstacleLayer"}
  - {name: inflation_layer, type: "costmap_2d::InflationLayer"}

# Map layer built with SLAM
static_layer:
  map_topic: /map
  subscribe_to_updates: false

# Map layer that contains information about the obstacles in the environment as detected by LIDAR
obstacle_layer:
  observation_sources: laser_object
  laser_scan_sensor: {sensor_frame: laser_object, data_type: DepthCloud, topic: /laser_object/depth/image_raw/compressedDepth, marking: true, clearing: true}

# Map layer that adds a cushion in meters around obstacles
inflation_layer:
  inflation_radius: 1.5



# obstacle_range: 2.5
# raytrace_range: 3.0

# footprint: [[0, 0.48895], [0.420624, 0.242824], [0.420624, -0.242824], [0, -0.48895], [-0.420624, -0.242824], [-0.420624, 0.242824]]
# #robot_radius: ir_of_robot

# inflation_radius: 0.55

# observation_sources: laser_object

# laser_scan_sensor: {sensor_frame: laser_object, data_type: DepthCloud, topic: /laser_object/depth/image_raw, marking: true, clearing: true}



# footprint: [[0, 0.48895], [0.420624, 0.242824], [0.420624, -0.242824], [0, -0.48895], [-0.420624, -0.242824], [-0.420624, 0.242824]]

# obstacle_layer:
#   # enabled:              true
#   # max_obstacle_height:  2.0
#   # max_obstacle_height:  0
#   # combination_method:   1
#   # track_unknown_space:  true    #true needed for disabling global path planning through unknown space
#   obstacle_range: 60.0
#   raytrace_range: 70.0
#   # origin_z: 0.0
#   z_resolution: 1
#   z_voxels: 4
#   publish_voxel_map: true
#   footprint_clearing_enabled: true  
#   observation_sources: laserscan lanes
#   laserscan: {
#     sensor_frame: laser,
#     data_type: LaserScan,
#     topic: /scan,
#     marking: true,
#     clearing: true,
#     min_obstacle_height: .333,
#     # max_obstacle_height: 2
#     inf_is_valid: true
#   }
#   # lanes: {
#   #   sensor_frame: camera_color_optical_frame,
#   #   data_type: PointCloud2,
#   #   topic: /points,
#   #   min_obstacle_height: -1,
#   #   marking: true,
#   #   clearing: true
#   # }
# #cost_scaling_factor and inflation_radius were now moved to the inflation_layer ns
# inflation_layer:
#   # enabled:              true
#   cost_scaling_factor:  1   # exponential rate at which the obstacle cost drops off (default: 10)
#   inflation_radius:     1.5  # max. distance from an obstacle at which costs are incurred for planning paths.

# #point_cloud_sensor: {sensor_frame: frame_name, data_type: PointCloud, topic: topic_name, marking: true, clearing: true}